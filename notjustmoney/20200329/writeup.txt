 다익스트라 알고리즘이란 음의 가중치가 없는 그래프에서 한 노드에서 다른 모든 노드까지의 최단거리를 구하는 알고리즘이다. 처음에는 한 노드에서 다른 모든 노드까지의 최단거리를 구하는 알고리즘이라는 말뜻이 잘 이해가 되지 않았다.플로이드-워셜 알고리즘은 3중 반복문을 이용해 모든 노드를 순회하며 임의의 한 노드로부터 다른 임의의 노드까지의 거리를 기록한다.즉, 가능한 모든 노드쌍의 최단거리 정보가 메모이제이션되어 있어 필요한 최단거리를 o(1) 시간에 구해낼 수 있다. 반면 다익스트라 알고리즘은, 모든 노드쌍의 최단거리를 구하는 것이 아닌, 어떤 한 노드와 다른 모든 노드 순서쌍의 최단거리를 구하는 알고리즘이다.

 알고리즘의 구체적 수행과정을 살펴보자. P[i][j]를 i노드와 j노드 사이의 거리라고 가정한다.

1. 출발점으로부터 최단거리를 저장한 배열 d[v]를 만들고, 출발노드에는 0, 출발점을 제외한 다른 노드들에는 충분히 큰 값인 INF로 초기화한다.
2. 현재 노드를 나타내는 변수 A에 출발 노드 번호를 저장한다.
3. A로부터 갈 수 있는 임의의 노드 B에 대해, d[A]+P[A][B]와 d[B]의 값을 비교한다.
4. 만약 d[A]+P[A][B]의 값이 더 작다면, 즉, 더 짧은 경로라면, d[B]의 값을 갱신한다.
5. A의 모든 이웃노드 B에 대해 위 작업을 수행한다.
6. A의 상태를 방문완료로 바꾸고, A는 더 이상 사용하지 않는다.
7. 미방문 상태인 모든 노드들 중, 출발점으로부터의 거리가 제일 짧은 노드 하나를 골라 A에 저장한다.
8. 도착노드가 방문완료 상태가 되거나, 미방문 상태의 노드를 선택할 수 없을 때까지 3~7과정을 반복한다.

위 과정이 끝난 후, 도착 노드에 저장된 값이 A로부터의 최단거리이다. 만약 INF라면, 도달할 수 있는 경로가 없다는 의미다. 


Pseudo Code

function Dijkstra(Graph, Source) 

   dist[source] = 0
   prev[source] = undefine

   create vertex set Q (방문하지 않은 노드 집합)
   
   foreach vertex v in Graph
	if v != source:
		dist[v] = INF
		prev[v] = undefine
	add v to Q


   while Q is not empty:
	u = vertex in Q with min dist[u]
	remove u from Q

	foreach neighbor v of u:
		alt = dist[u]+length(u, v)
	
		if alt < dist[v]:
			dist[v] = alt
			prev[v] = u



   return dist[], prev[]